`timescale 1ns/1ps
module tb_alu4bit;

    reg [3:0] a, b;
    reg [2:0] alu_sel;
    wire [3:0] alu_out;
    wire carry, zero;

    // Instantiate the ALU
    alu4bit uut (
        .a(a),
        .b(b),
        .alu_sel(alu_sel),
        .alu_out(alu_out),
        .carry(carry),
        .zero(zero)
    );

    initial begin
        // Test AND
        a = 4'b1010; b = 4'b1100; alu_sel = 3'b000; #10;
        $display("AND: a=%b, b=%b, out=%b, carry=%b, zero=%b", a, b, alu_out, carry, zero);

        // Test OR
        a = 4'b1010; b = 4'b0101; alu_sel = 3'b001; #10;
        $display("OR : a=%b, b=%b, out=%b, carry=%b, zero=%b", a, b, alu_out, carry, zero);

        // Test XOR
        a = 4'b1111; b = 4'b1010; alu_sel = 3'b010; #10;
        $display("XOR: a=%b, b=%b, out=%b, carry=%b, zero=%b", a, b, alu_out, carry, zero);

        // Test ADD
        a = 4'b1010; b = 4'b0101; alu_sel = 3'b011; #10;
        $display("ADD: a=%b, b=%b, out=%b, carry=%b, zero=%b", a, b, alu_out, carry, zero);

        // Edge case ADD (carry out)
        a = 4'b1111; b = 4'b0001; alu_sel = 3'b011; #10;
        $display("ADD with carry: a=%b, b=%b, out=%b, carry=%b, zero=%b", a, b, alu_out, carry, zero);

        $finish;
    end

endmodule
